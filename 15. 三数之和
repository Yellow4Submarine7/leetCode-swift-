func threeSum(_ nums: [Int]) -> [[Int]] {
    var i = 0
    var j = nums.count - 1
    let s_nums = nums.sorted()
    var resultArr:[[Int]] = [[]]
    if nums.count == 0 {
        return [[]]
    }
    for a in 0..<nums.count {
        if (s_nums[a] + s_nums[i] + s_nums[j] < 0 && i < j){
            if s_nums[a] == s_nums[i]{
                i += 2
            }
            i += 1
        }
        if (s_nums[a] + s_nums[i] + s_nums[j] > 0 && i < j){
            if s_nums[a] ==  s_nums[j]{
                i -= 2
            }
            j -= 1
        }
        var ar = [Int](repeating: 0, count: 3)
        if (s_nums[a] + s_nums[i] + s_nums[j] == 0 && i < j){
            ar[0] = s_nums[a]
            ar[1] = s_nums[i]
            ar[2] = s_nums[j]
        }
        
        resultArr.append(ar)
    }
    print(resultArr)
    return resultArr
}


threeSum([-1, 0, 1, 2, -1, -4])
var res = [[Int]]()
    let sortedNums = nums.sorted()
    var k = sortedNums.count - 1
    while k >= 2 {
        if sortedNums[k] < 0 {
            break;
        }
        var i = 0
        var j = k - 1
        let target = -sortedNums[k]
        while i < j {
            if sortedNums[i] + sortedNums[j] == target {
                res.append([sortedNums[i],sortedNums[j],sortedNums[k]])
                while i < j && sortedNums[i] == sortedNums[i + 1] {
                    i = i + 1
                }
                while i < j && sortedNums[j] == sortedNums[j - 1] {
                    j = j - 1
                }
                i = i + 1
                j = j - 1
            } else if sortedNums[i] + sortedNums[j] < target {
                i = i + 1
            } else {
                j = j - 1
            }
        }
        while k >= 2 && sortedNums[k] == sortedNums[k - 1] {
            k = k - 1
        }
        k = k - 1
    }
    return res
